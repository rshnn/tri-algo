This program is a course assignment for Linear Programming (CS521) class
at Rutgers University, Fall '14.
It implements Triangle algorithm for convex hull problem.

The program expects input on standard input (or redirected from a file)
The first value is number of dimensions - N. That is followed by N*X values
representing vertices. The input ends with Origin (zero vector).
Values only need to be separated by whitespace so feel free to align in any way.
See test folder for examples.

Example invocation:
./triangle < test/square

The program supports 2 cmdline options:
"verbosity" Possible values 0,1,2,3. Limits or increases level of program output
0 means that only input and result is printed

"iterations" sets limit to number of iterations should be smaller than 2^32 -1


Compiling:
Makefile is included with standard targets (all, clean).
The program need boost library and was developed against version 1.54 of this
library. This program uses C++13 features and thus requires a fairly recent
compiler (gcc, llvm has compile options issues).
To compile the program just type:
make


Algorithm implementation description:
The program implements projective version of Triangle Algorithm. The floating
point precision unit is chosen as epsilon. The program uses boost vector
and matrix manipulation library to implement the algorithm in the most
straightforward way, and amounts to less than 350 LoC.

The original attempt to always set alpha to 0.5 resulted in endless loop
for several inputs (like "tests/cube-shift"), so a minimizing function was
be implemented.

The minimizing function divides considered interval into several slices and
recurses using the two slices with lowest border points as a new interval.
In case it hits a constant section (due to representation limitations)
it considers interval with highest values in order to move the new p' point
as far possible. The recursion ends when the interval size reaches 1 ULP,
i.e. all points in the interval are represented as either high or low boundary.

The minimizing function is probably the only non-trivial part of the
implementation.

There are 4 different results the program can output:

1) The program has reached iteration limit. This limit is configurable yet
finite. The limit ensures timely  termination of the program, even if the
progress is really slow. "tests/triangle" is an example input that gives
this result mainly due to extremely slow progress of reducing distance to O.
It is possible to change the iteration limit and observe how the distance
of the final point changes.

2) The program cannot move any further. This outcome is the most common for
inputs where O is in the convex hull. Due to floating point representation
limitations, it is possible for the point that is a convex combination of
p' and a vertex nearest to p to be indistinguishable from p'. The observed
values for distance from O in this case were around 10^-15. However, this result
can also happen if the O is not in the convex hull, in that case the reported
distance is a good indicator.

3) Origin is in the convex hull. If the program has found p' that is within
floating point precision from p, it terminates declaring success.

4) Origin is NOT in the convex hull. This is the failure terminating condition.
If a vertex closer to O than p' cannot be found.


Limitations of the implementation:

The strongest limitation is the floating point representation. Although 1ULP
can be used as an epsilon in the computation the intermediate results ten to use its fractions (or powers) hitting rounding problems much sooner. This results
in the new point not being far enough from the current iterate and program
termination.

I have done experiments with restricting the alpha range to (0.0001, 1.0),
and although this change helped some cases that would stop on "too close"
condition. However, such change also breaks the assumption that each iterate
is strictly closer to O, that coupled with limitations of FP representation
guaranteed forward progress, resulting in more cases terminating on iteration
bound. Increasing the iteration bound by few orders of magnitude did not help
with the issue.
